#!/usr/bin/env python3
# -*- coding:utf-8 -*-
#
# This application looks for published services Avahi/Bonjour
# figures out the MAC address of the server and send events about
# newly discoverd services.
#
# Copyright (c) 2017 Fran√ßois Wautier
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies
# or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
# IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE

import argparse
import sys
import json
import os
import ssl
import logging
import ipaddress
import subprocess
import datetime as dt
import asyncio as aio
import buddylib as bl
import socket
from functools import partial
from zeroconf import ZeroconfServiceTypes,ServiceBrowser, Zeroconf
from struct import pack,unpack
import aioarping

SUBTYPE = "scanner"  
__version__ = "0.10"
CERTFILE = "autobuddy.crt"
scanner_function = """
"""

scanner_config = """
<buddyui version="0.1">
    <configuration  name="scanner">
        <control type="spinner" name="probe" label="Scanner interval">
            <start>30</start>
            <end>3600</end>
            <increment>5</increment>
            <postfix>secs</postfix>
            <default>600</default>
        </control>
    </configuration>
</buddyui>
"""
scanner_config_default = {"probe": 600}

class MyService(object):

    def remove_service(self, zeroconf, type, name):
        pass

    def add_service(self, zeroconf, type, name):
        info = zeroconf.get_service_info(type, name)
        info.address=socket.inet_ntoa(pack('>L',unpack('>L',info.address)[0]))
        bridgectl.register(info)

class ScannerBridge(bl.BuddyBridge):

    """
    This is the bridge application. It will check for the current list  of scanner bulb.
    It will report any new bulb
    """

    def __init__(self, loop, future, config, log):
        super(ScannerBridge, self).__init__(loop, future, config, log)
        self.probe_service = None
        self.seen_service = {}
        self.scanner_config = scanner_config_default
        self.scan_request=None
        self.towait=0

    def process_command(self, msg):
        if msg["content"]["command"] == "update config":
            if msg["content"]["target"] == self.target:
                for k, v in msg["content"]["value"].items():
                    scanner_config_default[k] = v
                self.sending({"subject": "control" + "." + self.subtype,
                              "content_type": "request",
                              "content": {"request": "save configuration",
                                          "target": self.type,
                                          #"token": self.target,
                                          "value": bl.encrypt(scanner_config_default, self.config["buddykey"])}})
        elif msg["content"]["command"] == "known services":
            if msg["subject"].startswith(self.type) and "target" in msg["content"]:
                los=[]
                for entity in self.seen_service.values():
                    if msg["content"]["value"] == entity.type:
                        newprop={}
                        for x,y in entity.properties.items():
                            try:
                                newprop[x.decode()]=y.decode()
                            except:
                                newprop[x.decode()]=y
                        los.append({"name":entity.name,"address":entity.address,
                                    "port":entity.port,"properties":newprop,
                                    "type":entity.type, "mac":entity.mac})
                self.sending({"subject": msg["content"]["target"],
                            "content_type": "event",
                            "content": {"event": "known services",
                                        "target": msg["content"]["target"],
                                        #"token": self.target,
                                        "value":los }})
        elif msg["content"]["command"] == "scan request" and msg["subject"] == self.target:
            if "service" in msg["content"]["value"]:
                if isinstance(msg["content"]["value"]["service"],list):
                    self.scan_request=msg["content"]["value"]["service"]
                else:
                    self.scan_request=[msg["content"]["value"]["service"]]
                if "delay" in msg["content"]["value"] and isinstance(msg["content"]["value"] ["delay"],int):
                    self.towait = msg["content"]["value"]["delay"]
                else:
                    self.towait = 15
                
        # else:
            # for aconn in self.devices:
                # aconn.process(msg)

    def process_response(self, msg):
        if self.state == "init" and msg["content"]["response"] == "configuration" and msg["subject"] == self.target:
            # Getting the config
            newconfig = {}
            fromconfig = []
            if msg["content"]["configuration"]:
                try:
                    storedconfig = bl.decrypt(
                        msg["content"]["configuration"],
                        self.config["buddykey"])
                    if self.config["debug"]:
                        self.log.debug(
                            "The config stored is {}".format(storedconfig))
                except:
                    storedconfig = {}
                    savenew = True
                    # log
                    if self.log:
                        self.log.warning("Config is mangled")
                    else:
                        print("Config is mangled")

                for x in storedconfig:
                    self.scanner_config[x] = storedconfig[x]

            self.config["database"] = msg["content"]["database"]
            if "configonly" in self.config and self.config["configonly"]:
                self.state = "wait config save"
            else:
                self.state = "active"
                self.build()
                self.sending({"subject": "control" + "." + self.target,
                              "content_type": "request",
                              "content": {"request": "functions",
                                          "target": self.type,
                                          "subtype": self.subtype,
                                          #"token": self.target,
                                          "value": {"configs": [scanner_config, self.scanner_config]}}})
                self.sending({"subject": self.target,
                              "content_type": "event",
                              "content": {"event": "config updated",
                                          "target": self.target,
                                          "value": self.scanner_config}})

        elif msg["content"]["response"] == "save configuration" and msg["subject"] == self.target:
            if self.state == "active" and msg["content"]["status"] != "done":
                # log
                if self.log:
                    self.log.warning("Warning: Configuration was not saved.")
                else:
                    print("Warning: Configuration was not saved.")
            elif self.state == "wait config save":
                if msg["content"]["status"] == "done":
                    raise bl.Exit(0, "Configuration was saved")
                else:
                    raise bl.Exit(2, "Error: Configuration was not saved")
            else:
                self.sending({"subject": "control" + "." + self.target,
                              "content_type": "request",
                              "content": {"request": "functions",
                                          "target": self.type,
                                          "subtype": self.subtype,
                                          #"token": self.target,
                                          "value": {"configs": [scanner_config, self.scanner_config]}}})
                self.sending({"subject": self.target,
                              "content_type": "event",
                              "content": {"event": "config updated",
                                          "target": self.target,
                                          "value": self.scanner_config}})


        elif msg["content"]["response"] == "functions" and msg["subject"] == self.type+".functions":
            if msg["content"]["status"] != "done":
                if self.log:
                    self.log.warning("Warning: Something went wrong when registering with the server. We probably should stop.")
                else:
                    print("Warning: Something went wrong when registering with the server. We probably should stop.")
        else:
            if self.log:
                self.log.warning(
                    "Unknown response {} {} {}".format(msg["subject"],
                                                       msg["content_type"],
                                                       msg["content"]))
            else:
                print (
                    "Unknown response {} {} {}".format(msg["subject"],
                                                       msg["content_type"],
                                                       msg["content"]))

    def process_event(self, msg):
        # We can react to no event. 
        # TODO
        return

    def build(self):
        self.sending({"subject": "control" + "." + self.target,
                      "content_type": "request",
                      "content": {"request": "functions",
                                  "target": self.type,
                                  "subtype": self.subtype,
                                  "value": {"functions": "", "configs": [scanner_config, self.scanner_config]}}})

        coro = partial(ScannerBridge.service_scanner, self)
        self.probe_service = aio.ensure_future(coro(), loop=self.loop)

    async def service_scanner(self):
        # Give time for things to settle
        await aio.sleep(2)
        # Here we actually start the probe
        while True:
            #Get the list of serivces
            if self.scan_request is None:
                zc=Zeroconf(interfaces=self.config["addresses"])
                los=ZeroconfServiceTypes.find(zc);
                zc.close()
            else:
                los=self.scan_request
                self.scan_request = None
            
            for aserv in los:
                if self.config["debug"]:
                    self.log.debug(
                        "Scanning for service {}".format(aserv))
                zc=Zeroconf(interfaces=self.config["addresses"])
                slistener = MyService()
                browser = ServiceBrowser(zc, aserv, slistener)
                await aio.sleep(5)
                zc.close()
            self.towait = self.scanner_config["probe"]
            while self.towait>0:
                self.towait -= 5
                await aio.sleep(5)


    def register(self, entity):
        if entity.name not in self.seen_service or entity.address != self.seen_service[entity.name].address:
            newprop={}
            for x,y in entity.properties.items():
                try:
                    newprop[x.decode()]=y.decode()
                except:
                    newprop[x.decode()]=y
            #Mac address if IPv4Address
            if isinstance(ipaddress.ip_address(entity.address),ipaddress.IPv4Address):
                #Cheat... uses arp command after a quick ping
                try:
                    cheat=subprocess.getoutput("ping -c 1 -t 5 "+entity.address)
                    mymac=subprocess.getoutput("arp -n|grep -w '"+entity.address+"'| awk '{ print $3 }'")
                except:
                    mymac=""
            if mymac == "":
                #Local?
                iplist=subprocess.getoutput("ip addr").split("\n")
                prev=""
                for x in iplist:
                    if entity.address in x:
                        mymac=[ aa for aa in prev.split(" ") if  aa ][1]
                        break
                    prev=x
            if mymac == "":
                self.log.debug(
                    "Could not figure out mac address for service {}".format(entity))
                return
            
            self.seen_service[ entity.name] = entity
            entity.mac = mymac
            self.sending({"subject": self.target,
                            "content_type": "event",
                            "content": {"event": "service found",
                                        "target": self.target,
                                        "value": {"name":entity.name,"address":entity.address,
                                                  "port":entity.port,"properties":newprop,
                                                  "type":entity.type, "mac": mymac}}})
            
            if self.config["debug"]:
                self.log.debug(
                    "Found new service {}".format(entity))
            

    def unregister(self, entity):
        pass


aboutstr = """<p>ScannerBuddy is an application scanning the LAN for services published using Avahi/Bonjour. Upon discovery of a new or modified
service, it will send a "service found" event. The value associated with the event is a dictionary with key "name", "type", "address", "mac", "port" and, 
"properties". It will respond to "known services" commands, content.target should be the type.subtype of the requester. content.value should be
the type of service requested.</p>
<p class=\"bu-copyright\">&copy; 2017 Fran&ccedil;ois Wautier</p>
"""

iconstr = {}

cfgdefault = {
    "type": "scanner",
     "subtype": "scanner",
     "host": "localhost",
     "port": 8745,
     "credential": "",
     "ssl": "",
     "addresses": []}


def configure():
    parser = argparse.ArgumentParser(
        description="Track scanner of people/pet/devices over the LAN.")
    # version="%prog " + __version__ + "/" + bl.__version__)
    parser.add_argument("-t", "--type", default=cfgdefault["type"],
                        help="The type of devices we handle. (default \"%s\")." % cfgdefault["type"])
    parser.add_argument("-s", "--subtype", default=cfgdefault["subtype"],
                        help="The specific subtype we manage. (default \"%s\")." % cfgdefault["subtype"])

    parser.add_argument("-a", "--host", default=cfgdefault["host"],
                        help="The host address of the server (default \"%s\")." % cfgdefault["host"])
    parser.add_argument("-p", "--port", type=int, default=cfgdefault["port"],
                        help="The port used by the server (default \"%s\")." % cfgdefault["port"])

    parser.add_argument("-c", "--config", default="/etc/autobuddy/scanner.cfg", type=argparse.FileType('r'),
                        help="Config file to use (default \"/etc/autobuddy/scanner.cfg\")")

    parser.add_argument("-A", "--addresses", action="append", default=[],
                        help="The adresses of the interfaces to use (default [\"0.0.0.0\"]).")

    parser.add_argument("-V", "--credential", default=cfgdefault['credential'],
                        help="The credential used to verify authorization (default \"%s\")." % cfgdefault["credential"])
    parser.add_argument("-S", "--ssl", default="",
                        help="The directory where the file %s can be found." % (CERTFILE))
    parser.add_argument("-v", "--verbose", action="store_true", default=False,
                        help="Log warning messages")

    parser.add_argument("-C", "--configonly", default="",
                        help="Exit after the the configuration has been saved")
    parser.add_argument("-d", "--debug", action="count", default=0,
                        help="Log debug information (default False)")

    try:
        opts = parser.parse_args()
    except Exception as e:
        parser.error("Error: " + str(e))

    if opts.debug:
        logging.basicConfig(
            level=logging.DEBUG,
            format='%(levelname)7s: %(message)s',
            stream=sys.stderr,
        )
    elif opts.verbose:
        logging.basicConfig(
            level=logging.WARNING,
            format='%(levelname)7s: %(message)s',
            stream=sys.stderr,
        )
    else:
        logging.basicConfig(
            level=logging.CRITICAL,
            format='%(levelname)7s: %(message)s',
            stream=sys.stderr,
        )
    scannerlog = logging.getLogger('')
    scannercfg = {"debug": opts.debug}
    try:
    # if True:
        if opts.configonly:
            try:
                cfgdata = json.load(opts.config)
                opts.config.close()
            except:
                cfgdata = {}
        else:
            cfgdata = json.load(opts.config)
            opts.config.close()

        # Definition
        if opts.type != cfgdefault["type"]:
            scannercfg["type"] = opts.type
        elif "type" in cfgdata:
            scannercfg["type"] = cfgdata["type"]
        else:
            scannercfg["type"] = opts.type
        if opts.debug:
            scannerlog.debug("The type is %s." % scannercfg["type"])

        if opts.subtype != cfgdefault["subtype"]:
            if "-" in opts.subtype:
                raise Exception("Subtype may not contain a dash (\"-\")")
            scannercfg["subtype"] = opts.subtype
        elif "subtype" in cfgdata:
            scannercfg["subtype"] = cfgdata["subtype"]
        else:
            scannercfg["subtype"] = opts.subtype
        if opts.debug:
            scannerlog.debug("The subtype is %s." % scannercfg["subtype"])

        # Controller
        if opts.host != cfgdefault["host"]:
            scannercfg["host"] = opts.host
        elif "host" in cfgdata:
            scannercfg["host"] = cfgdata["host"]
        else:
            scannercfg["host"] = cfgdefault["host"]
        if opts.debug:
            scannerlog.debug("The host is %s" % scannercfg["host"])

        if opts.port != cfgdefault["port"]:
            scannercfg["port"] = opts.port
        elif "port" in cfgdata:
            scannercfg["port"] = cfgdata["port"]
        else:
            scannercfg["port"] = cfgdefault["port"]
        if opts.debug:
            scannerlog.debug("The port is %s" % (scannercfg["port"]))

        # Bluetooth
        if opts.addresses != cfgdefault["addresses"]:
            scannercfg["addresses"] = opts.addresses
        elif "addresses" in cfgdata:
            scannercfg["addresses"] = cfgdata["addresses"]
        else:
            scannercfg["addresses"] = ["0.0.0.0"]
        if opts.debug:
            scannerlog.debug(
                "The addresses list is %s" %
                (scannercfg["addresses"]))

        # Authentication and encryption
        if opts.credential != cfgdefault["credential"]:
            scannercfg["credential"] = opts.credential
        elif "credential" in cfgdata:
            scannercfg["credential"] = cfgdata["credential"]
        else:
            scannercfg["credential"] = cfgdefault["credential"]
        if opts.debug:
            scannerlog.debug(
                "The credential is %s" %
                scannercfg["credential"])

        if opts.ssl != cfgdefault["ssl"]:
            scannercfg["ssl"] = opts.ssl
        elif "ssl" in cfgdata:
            scannercfg["ssl"] = cfgdata["ssl"]
        else:
            scannercfg["ssl"] = cfgdefault["ssl"]
        if scannercfg["ssl"] and not (os.path.isfile(scannercfg["ssl"] + "/" + CERTFILE)):
            scannerlog.critical("Encryption: Could not find {} .".format(
                scannercfg["ssl"] + "/" + CERTFILE))
            sys.exit()
        if opts.debug:
            if scannercfg["ssl"]:
                scannerlog.debug(
                    "The ssl certificates can be found in %s" %
                    scannercfg["ssl"])
            else:
                scannerlog.debug("The connection is not encrypted")

        if "buddykey" in cfgdata:
            scannercfg["buddykey"] = cfgdata["buddykey"]

        # Save hings
        if opts.configonly:

            if "buddykey" not in scannercfg:
                if opts.debug:
                    scannerlog.debug("Generating random key")
                scannercfg["buddykey"] = bl.keygen()
            try:
                del(scannercfg["debug"])
            except:
                pass
            with open(opts.configonly, "w") as cfile:
                json.dump(scannercfg, cfile)
            os.chmod(opts.configonly, 384)  # 0600
            sys.exit()

    except Exception as e:
        scannerlog.error("Error: %r" % e)
        sys.exit(-2)

    return (scannerlog, scannercfg)


if __name__ == "__main__":
    log, config = configure()
    log.info("Configured")
    loop = aio.get_event_loop()
    if config["debug"]:
        loop.set_debug(True)

    ## Let's find out what network and interface we have Linux
    #config["networks"] = {}
    #if config["lan"]:
        #p1 = subprocess.getoutput(
            #"ip route | sed '/via/d' | sed '/dev/!d' | sed '/src/!d'")
        #if config["debug"]:
            #log.debug("Received from the shell: {}".format(p1))
        #for aroute in p1.split("\n"):
            #allofit = [z for z in [y.strip()
                                   #for y in aroute.split(" ")] if z != ""]
            #netadd = ipaddress.IPv4Address(allofit[allofit.index("src") + 1])
            #network = ipaddress.IPv4Network(allofit[0])
            #dev = allofit[allofit.index("dev") + 1]
            #config["networks"][netadd] = [dev, network]

    if config["ssl"]:
        sslcontext = ssl.create_default_context(ssl.Purpose.SERVER_AUTH,
                                                cafile=config["ssl"] + '/' + CERTFILE)

        sslcontext.check_hostname = False
    else:
        sslcontext = None
    connFuture = aio.Future()
    fac = loop.create_connection(
            partial(ScannerBridge,
                    loop,
                    connFuture,
                    config,
                    log),
            config["host"],
            config["port"],
            ssl=sslcontext)
    conn, bridgectl = loop.run_until_complete(fac)
    loop.call_soon(
        bridgectl.configrequest,
        {"about": {"ScannerBuddy": aboutstr},
         "display": iconstr})

    try:
        loop.run_until_complete(connFuture)
    except KeyboardInterrupt:
        print("\n", "Exiting at user's request")
    finally:

        bridgectl.probe_service.set_result('done')
        conn.close()
        loop.close()
