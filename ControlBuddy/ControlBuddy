#!/usr/bin/env python
# -*- coding:utf-8 -*-
# 
# Copyright (c) 2015 Fran√ßois Wautier
#
# Permission is hereby granted, free of charge, to any person obtaining a copy 
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies
# or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR 
# IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE
#
# This application is simply a bridge application.
# This is where Zone and sub-zone are known and handled
# This is where persistance is done. Other application may 
# query the persistance DB, but only here should object be created
# One could define different user/access right to enforce this.
#
# This application need only to know:
#                - The broker for ampq messaging
#                - The DB url with credential
#                - The read only db credential for requesting clients
#
# Since all data exchanged via AMQP should be serialized with JSON, we use JSON format
# for the config file.
#
#
# Buddy can also persist information for other applications

import argparse, sys, traceback,json
import qpid.messaging as qm
import buddylib as bl
from qpid.log import enable, DEBUG, WARN
from collections import defaultdict
from time import sleep

__version__="0.1"

iprint=bl.iprint


def zone_of_interest(self,subject):
    #TODO  change to a regex... Now light.Home and light.Home Theatre  would both match on Home zone
    split=subject.split(".")
    if split[0] == self.type and ".".join(split[1:]) == self.name:
        return True
    return False
    
        
def zone_process(self,msg):
    if msg.content_type == "command":
        for device in self.devices:
            if msg.content["target"] == "zone" or msg.content["target"] == device.type:
                myc.sending({"subject":device.type + "." + device.name,
                           "content_type":msg.content_type,
                           "content": msg.content})
        try:
            if msg.content["propagate"]:
                for szone in self.sub_zone:
                    szone._process(msg) #Direcet into _process insteat of process because we need to avoind of_interest. Sub-zone won't match
        except: pass 
    return None

#Hop we go....
bl.Zone._process=zone_process
bl.Zone.of_interest=zone_of_interest

class Controller():
    """
    This is the main class that control the zones, create new objects, etc
    """
    def __init__(self):
        self.name=None
        self.Sender=None
        self.Receiver=None
        self.config={}
        self.pendingauth={}
        self.about={};
        self.display={};


    def configure(self):
        self.default={"address":"autobuddy/#"}
        parser = argparse.ArgumentParser(description="Track the overall Buddy Home Automation ecosystem.")
        #                            version="%prog " + __version__ + "/" + bl.__version__) 
        parser.add_argument("-a", "--address", default=self.default,
                        help="The AMQP-style address we are listening to (default \"%s\"). Format should be <topic>/<subject>"%self.default["address"])
        parser.add_argument("-b", "--broker", default="",
                        help="connect to specified BROKER")
        parser.add_argument("-c", "--config", default="/etc/autobuddy/config.cfg",
                        help="Config file to use (default \"/etc/autobuddy/config.cfg\")")
        parser.add_argument("-C", "--configonly",
                        help="create/update a config file")
        parser.add_argument("-d", "--debug", action="store_true", default=False,
                        help="Log debug information (default False)")
        parser.add_argument("-D", "--database", default="",
                        help="connect to the specified DB"),
        parser.add_argument("-H", "--heartbeat", type=int, default=60,
                        help="number of seconds between heartbeat messages. (default 60)"),
        parser.add_argument("-i", "--initial", action="store_true", default=False,
                        help="create the Zone if it does not exist.")
        parser.add_argument("-r", "--dbronly", default="",
                        help="credentials for readonly access to DB")
        parser.add_argument("-v", "--verbose", action="store_true", default=False,
                        help="Log warning messages")
        parser.add_argument("-z", "--zone", default="",
                        help="The zone we want to control")
        try:
            opts=parser.parse_args()
        except Exception as e:
            iprint("Error: ",e)
            parser.print_help()
            sys.exit(-2)

        if opts.debug:
            enable("qpid", DEBUG)
        elif opts.verbose:
            enable("qpid", WARN)
            
        buddycfg = {}
        
        try:
        #if True:
            try:
                with file(opts.config,"r") as cfile:
                    cfgdata = json.load(cfile)
                self.config["config"] = opts.config
            except:
                if opts.configonly:
                    iprint ("Warning: configuration file %s does not exist or contains garbage."%opts.config)
                    cfgdata={}
                else:
                    file(opts.config,"r")
            
            if opts.broker:
                buddycfg["broker"] = opts.broker
            else:
                buddycfg["broker"] = ""
                if "user" in cfgdata["broker"] and cfgdata["broker"]["user"]:
                    buddycfg["broker"] += cfgdata["broker"]["user"]+"/" + cfgdata["broker"]["password"] + "@"
                buddycfg["broker"] += cfgdata["broker"]["host"]
                
                if "port" in cfgdata["broker"] and cfgdata["broker"]["port"]:
                    buddycfg["broker"] += ":"+ str(cfgdata["broker"]["port"])

            if opts.debug:
                iprint("The broker is",buddycfg["broker"])
                    
            if opts.database:
                buddycfg["database"] = opts.database
            else:
                buddycfg["database"] = cfgdata["database"]["driver"] + "://"
                if "user" in cfgdata["database"] and cfgdata["database"]["user"]:
                    buddycfg["database"] += cfgdata["database"]["user"] + ":" + cfgdata["database"]["password"] + "@"
                buddycfg["database"] += cfgdata["database"]["host"]
                
                if "port" in cfgdata["database"] and cfgdata["database"]["port"]:
                    buddycfg["database"] += ":"+ str(cfgdata["database"]["port"])
                buddycfg["database"] += "/" + cfgdata["database"]["db"]
                
                
            if opts.debug:
                iprint("The database is",buddycfg["database"])     
                    
            if opts.dbronly:
                buddycfg["dbronly"] = opts.dbronly
            else:
                buddycfg["dbronly"] = cfgdata["database"]["driver"] + "://"
                if "user" in cfgdata["dbronly"] and cfgdata["dbronly"]["user"]:
                    buddycfg["dbronly"] += cfgdata["dbronly"]["user"] + ":" + cfgdata["dbronly"]["password"] + "@"
                buddycfg["dbronly"] += cfgdata["database"]["host"]
                
                if "port" in cfgdata["database"] and cfgdata["database"]["port"]:
                    buddycfg["dbronly"] += ":"+ str(cfgdata["dbronly"]["port"])
                buddycfg["dbronly"] += "/" + cfgdata["database"]["db"]
                
                
            if opts.debug:
                iprint("The dbronly is",buddycfg["dbronly"])      
            
            if "buddykey" in cfgdata:
                buddycfg["buddykey"] = cfgdata["buddykey"]
                
            buddycfg["hb"] = opts.heartbeat
            if opts.debug:
                iprint("The heartbeat interval is",buddycfg["hb"]) 
              
            if opts.address != self.default:
                buddycfg["address"] = opts.address
            elif "address" in cfgdata:
                buddycfg["address"] = cfgdata["address"]
            else:
                buddycfg["address"] = self.default["address"]
            if opts.debug:
                iprint("The topic is",buddycfg["address"].split("/")[0],"and the subject is",buddycfg["address"].split("/")[-1])      
 
            if opts.zone:
                buddycfg["zone"] = opts.zone
            else:
                buddycfg["zone"] = cfgdata["zone"]
            buddycfg["create zone"] = opts.initial
                
            if opts.debug:
                iprint("The zone is",buddycfg["zone"]) 
                
            if opts.configonly:
                import os
                brokconfig={}
                if "@" in buddycfg["broker"]:
                    brokconfig["user"],brokconfig["password"]=buddycfg["broker"].split("@")[0].split("/")
                if ":" in buddycfg["broker"]:
                    brokconfig["host"],brokconfig["port"] =  buddycfg["broker"].split("@")[-1].split(":")
                else:
                    brokconfig["host"] =  buddycfg["broker"].split("@")[-1]
                newconfig={"broker":brokconfig,"address": buddycfg["address"]}
                
                if buddycfg["dbronly"]:
                    userpass = buddycfg["dbronly"].split("://")[-1]
                    userpass = userpass.split("@")[0]
                    newconfig["dbronly"]={"user":userpass.split(":")[0]}
                    if ":" in userpass:
                        newconfig["dbronly"]["password"]=userpass.split(":")[1]
                newconfig["database"]={}
                newconfig["database"]["driver"]=buddycfg["database"].split("://")[0]
                remain=buddycfg["database"].split("://")[1]
                userpass=remain.split("@")[0]
                newconfig["database"]["user"]=userpass.split(":")[0]
                if ":" in userpass:
                    newconfig["database"]["password"]=userpass.split(":")[1]
                remain=remain.split("@")[1]
                dbname=remain.split("/")[1]
                newconfig["database"]["db"]=dbname
                remain=remain.split("/")[0]
                newconfig["database"]["host"]=remain.split(":")[0]
                if ":" in remain:
                    newconfig["database"]["port"]=remain.split(":")[1]
                newconfig["zone"]=buddycfg["zone"]
                if "buddykey" in buddycfg:
                    newconfig["buddykey"] = buddycfg["buddykey"]
                else:
                    if opts.debug:
                        iprint("Generating random key")   
                    newconfig["buddykey"] = bl.keygen()
                with file(opts.configonly,"w") as cfile:
                    json.dump(newconfig,cfile)
                os.chmod(opts.configonly,0600)
                iprint("The configuration has been saved")
                try:
                    sess=bl.getSession(buddycfg["database"])
                    bl.initialize(sess)
                except:
                    iprint("Database could not be created")
                sys.exit(0)

        except Exception as e:
            iprint("Error:",e)
            sys.exit(-2)
        buddycfg["debug"]=opts.debug
        self.config = buddycfg



    def build(self):
        sess=bl.getSession(self.config["database"])
        self.DBSession=sess
        try:
            self.Zone=sess.query(bl.Zone).filter_by(name = "zone-BuddyRoot").one()
        except Exception as e:
            if self.config["create zone"]:
                try:
                    nzone=bl.Zone()
                    nzone.name="zone-BuddyRoot"
                    nzone.nickname=self.config["zone"]
                    sess.add(nzone)
                    sess.commit()
                    self.Zone=nzone
                except:
                    iprint("Error: Cannot initial zone",self.config["zone"]," Is it already defined?")
                    sys.exit(-3)
            else:
                iprint("Error: Cannot unambiguously find zone",self.config["zone"])
                sys.exit(-3)
            
        self.allZones = self.Zone.allNames()
        self.allFunctions= defaultdict(dict)   #Devices not located
        lofunc=sess.query(bl.BuddyFunction).all()
        for x in lofunc:
            self.allFunctions[x.type][x.subtype]=x.functions
        #sess.close()
        
        
    def connect(self):
        self.Connection = qm.Connection(url=str(self.config["broker"]),
                  protocol='ssl')
        self.Connection.open()
        self.Session = self.Connection.session()
        self.Receiver = self.Session.receiver(self.config["address"])
        #self.ControlReceiver = self.Session.receiver(self.config["address"])
        #self.Sender = self.Session.sender(self.config["address"])

    def disconnect(self):
        self.Connection.close()

    def receiving(self):
        try:
            while True:
                msg = self.Receiver.fetch(0)
                if msg:
                    msg.content=json.loads(msg.content)
                    self.MsgProcess(msg)
        except:
            self.Session.acknowledge()
            msg = self.Receiver.fetch(self.config["hb"])
            if msg:
                msg.content=json.loads(msg.content)
                self.MsgProcess(msg)
            
    def MsgProcess(self,msg):
        if msg.content_type == "command" and msg.subject.split(".")[0] == "zone":
            #Just echo the command
            loz=[self.Zone]
            nloz=[]
            while loz:
                for sz in loz:
                    sz.process(msg)
                    nloz += sz.sub_zone
                loz=nloz
                nloz=[]
        elif msg.subject.split(".")[0] == "control":
            #print msg
            try:
                if msg.content_type == "request":
                    sess=self.DBSession
                    if msg.content["request"] == "configuration":
                        try:
                            myconfig = sess.query(bl.BuddyProperty)
                            myconfig = myconfig.filter_by(name="configuration")
                            myconfig = myconfig.filter_by(entity=msg.subject.split(".")[1]).one()
                            cfgdata = myconfig.values
                        except:
                            cfgdata = ""
                        self.sending({"subject":msg.content["target"]+"."+msg.subject.split(".")[1],
                                    "content_type":"response",
                                    "content": {"response":"configuration",
                                                "token": msg.content["token"],
                                                "database":self.config["database"],
                                                "status": "done",
                                                "configuration":cfgdata}})
                        #See what's in it form me
                        if "value" in msg.content:
                            msgval={}
                            if "about" in msg.content["value"]:
                                self.about.update(msg.content["value"]["about"])
                                msgval["about"]=msg.content["value"]["about"]
                            if "display" in msg.content["value"]:
                                self.display.update(msg.content["value"]["display"])
                                msgval["display"]=msg.content["value"]["display"]
                            if msgval:
                                 self.sending({"subject":msg.content["target"]+"."+msg.subject.split(".")[1],
                                    "content_type":"event",
                                    "content": {"response":"gui info",
                                                "value":msgval}})
                                    
                    elif msg.content["request"] == "save configuration":
                        try:
                            myconfig = sess.query(bl.BuddyProperty)
                            myconfig = myconfig.filter_by(name="configuration")
                            myconfig = myconfig.filter_by(entity=msg.subject.split(".")[1]).one()
                        except:
                            myconfig = bl.BuddyProperty()
                            myconfig.name = "configuration"
                            myconfig.entity = msg.subject.split(".")[1]
                            sess.add(myconfig)
                        myconfig.values = msg.content["value"]
                        try:
                            sess.commit()
                            sts=True
                        except:
                            sts=False
                        self.sending({"subject":msg.content["target"]+"."+msg.subject.split(".")[1],
                                    "content_type":"response",
                                    "content": {"response":"save configuration",
                                                "token": msg.content["token"],
                                                "status": (sts and "done" ) or "failed" }})
                                    
                    elif msg.content["request"] == "save property":
                        try:
                            myprop = sess.query(bl.BuddyProperty)
                            myprop = myprop.filter_by(entity=msg.subject.split(".")[1])
                            myprop = myprop.filter_by(name=msg.content["name"]).one()
                        except:
                            myprop = bl.BuddyProperty()
                            myprop.entity = msg.subject.split(".")[1]
                            myprop.name = msg.content["name"]
                            sess.add(myprop)
                        myprop.values = msg.content["value"]
                        try:
                            sess.commit()
                            sts=True
                        except:
                            sts=False
                        self.sending({"subject":msg.content["target"]+"."+msg.subject.split(".")[1],
                                    "content_type":"response",
                                    "content": {"response":"save property",
                                                "name": myprop.name,
                                                "token": msg.content["token"],
                                                "status": (sts and "done" ) or "failed" }})
                                    
                    elif msg.content["request"] == "get property":
                        result={}
                        myprop = sess.query(bl.BuddyProperty)
                        myprop = myprop.filter_by(entity=msg.content["target"])
                        if "name" in msg.content and msg.content["name"]:
                            myprop = myprop.filter_by(name=msg.content["name"])
                        lop=myprop.all()
                        for x in lop:
                            result[x.name]=x.values

                        self.sending({"subject":msg.content["target"]+"."+msg.subject.split(".")[1],
                                    "content_type":"response",
                                    "content": {"response":"get property",
                                                "token": msg.content["token"],
                                                "value": result,
                                                "status": "done" }})

                    elif msg.content["request"] == "creation":
                        newent=getattr(bl,msg.content["target"])()
                        for x in msg.content["value"]:
                            setattr(newent,x,msg.content["value"][x])
                        sess.add(newent)
                        newent.location = self.Zone
                        try:
                            sess.commit()
                            sts=True
                        except:
                            sts=False
                        self.sending({"subject":msg.content["target"]+"."+newent.name,
                                    "content_type":"response",
                                    "content": {"response":"creation",
                                                "token": msg.content["token"],
                                                "status": (sts and "done" ) or "failed" }})
                           
                    elif msg.content["request"] == "deletion":
                        mytype=getattr(bl,msg.content["target"])
                        try:
                            thisdev=sess.query(mytype).filter_by(name=msg.content["value"]).one()
                            sess.delete(thisdev)
                            sess.commit()
                            sts=True
                        except:
                            sts=False
                        self.sending({"subject":msg.content["target"]+"."+newent.name,
                                    "content_type":"response",
                                    "content": {"response":"deletion",
                                                "token": msg.content["token"],
                                                "status": (sts and "done" ) or "failed" }})
                                                        
                    elif msg.content["request"] == "define device":
                        mytype=getattr(bl,msg.content["target"])
                        try:
                            device=self.getDevice(msg.content["value"]["name"])
                            thisval={"name":device.name}
                            thisval["nickname"]=device.nickname
                            thisval["type"]=device.type
                            thisval["subtype"]=device.subtype
                            thisval["zone"]=device.location.name
                        except:
                            sts=False
                            thisval={}
                        self.sending({"subject":msg.content["target"]+"."+newent.name,
                                    "content_type":"response",
                                    "content": {"response":"define device",
                                                "token": msg.content["token"],
                                                "status": (sts and "done" ) or "failed",
                                                "value": thisval}})
                    elif msg.content["request"] == "nickname":
                        mytype=getattr(bl,msg.content["target"])
                        try:
                            device=self.getDevice(msg.content["value"]["name"])
                            device.nickname=msg.content["value"]["nickname"]
                            sess.commit()
                            sts=True
                        except:
                            sts=False
                        self.sending({"subject":msg.content["target"]+"."+msg.content["value"]["name"],
                                    "content_type":"response",
                                    "content": {"response":"nickname",
                                                "value": msg.content["value"]["nickname"],
                                                "token": msg.content["token"],
                                                "status": (sts and "done" ) or "failed" }})
                                    
                    elif msg.content["request"] == "functions":
                        try:
                            myent=sess.query(bl.BuddyFunction).\
                                filter_by(type=msg.content["target"]).\
                                    filter_by(subtype=msg.content["subtype"]).one()
                        except:
                            myent=bl.BuddyFunction()
                            myent.type=msg.content["target"]
                            myent.subtype=msg.content["subtype"]
                            sess.add(myent)
                        for x in msg.content["value"]:
                            setattr(myent,x,msg.content["value"][x])
                        
                        try:
                            sess.commit()
                            sts=True
                            self.allFunctions[myent.type][myent.subtype]=myent.functions
                        except:
                            sts=False
                        self.sending({"subject":msg.content["target"]+".functions",
                                    "content_type":"response",
                                    "content": {"response":"functions",
                                                "token": msg.content["token"],
                                                "status": (sts and "done" ) or "failed" }})

                    elif msg.content["request"] == "zone creation":
                        pzone=self.getZone(msg.content["value"]["parent"])
                        del(msg.content["value"]["parent"])
                        czone=bl.Zone()
                        for x in msg.content["value"]:
                            setattr(czone,x,msg.content["value"][x])
                        czone.parent=pzone
                        sess.add(czone)
                        try:
                            sess.commit()
                            sts=True
                        except:
                            sts=False
                        self.sending({"subject":msg.content["target"]+"."+czone.name,
                                    "content_type":"response",
                                    "content": {"response":"zone creation",
                                                "token": msg.content["token"],
                                                "status": (sts and "done" ) or "failed"}})
                        if sts:
                            self.sending({"subject":"zone"+"."+czone.name,
                                        "content_type":"event",
                                        "content": {"event":msg.content["request"],
                                                    "value" : {"nickname":czone.nickname,"parent":pzone.name}}})
                                        

                    elif msg.content["request"] == "zone deletion":
                        #print "Got Delete",msg
                        czone = self.getZone(msg.content["value"]["name"])
                        lodevs=czone.allDevices()
                        cname=czone.name
                        sess.delete(czone)
                        for x in lodevs:
                            x.location=self.Zone
                        try:
                            sess.commit()
                            sts=True
                        except:
                            sts=False
                        self.sending({"subject":msg.content["target"]+"."+cname,
                                    "content_type":"response",
                                    "content": {"response":"zone deletion",
                                                "token": msg.content["token"],
                                                "status": (sts and "done" ) or "failed",
                                                "name" : msg.content["value"]["name"]}})
                        if sts:
                            self.sending({"subject":"zone"+"."+czone.name,
                                        "content_type":"event",
                                        "content": {"event":msg.content["request"]}})
                                        
                    
                    elif msg.content["request"] in ["zone location"]:
                        #print "Got",msg
                        pzone = self.getZone(msg.content["value"]["parent"])
                        czone = self.getZone(msg.content["value"]["name"])
                        czone.parent = pzone
                        try:
                            sess.commit()
                            sts=True
                        except:
                            sts=False
                        self.sending({"subject":msg.content["target"]+"."+czone.name,
                                    "content_type":"response",
                                    "content": {"response":msg.content["request"],
                                                "token": msg.content["token"],
                                                "status": (sts and "done" ) or "failed",
                                                "name" : (sts and czone.name) or ""}})
                        if sts:
                            self.sending({"subject":"zone"+"."+czone.name,
                                        "content_type":"event",
                                        "content": {"event":msg.content["request"],
                                                    "value" : {"parent":pzone.name}}})
                    
                    elif msg.content["request"] in ["zone nickname"]:
                        #print "Got",msg
                        czone = self.getZone(msg.content["value"]["name"])
                        czone.nickname = msg.content["value"]["nickname"]
                        try:
                            sess.commit()
                            sts=True
                        except:
                            sts=False
                        self.sending({"subject":msg.content["target"]+"."+czone.name,
                                    "content_type":"response",
                                    "content": {"response":msg.content["request"],
                                                "token": msg.content["token"],
                                                "status": (sts and "done" ) or "failed",
                                                "name" : (sts and czone.nickname) or ""}})
                        if sts:
                            self.sending({"subject":"zone"+"."+czone.name,
                                        "content_type":"event",
                                        "content": {"event":msg.content["request"],
                                                    "value" : {"nickname":czone.nickname}}})
                                    
                    elif msg.content["request"] == "device location":
                        pzone=self.getZone(msg.content["value"]["parent"])
                        if pzone:
                            device=None
                            idx=0
                            if not device:
                                device=self.getDevice(msg.content["value"]["name"])
                            if device:
                                device.location = pzone
                            try:
                                sess.commit()
                                sts=True
                            except:
                                sts=False
                            self.sending({"subject":msg.content["target"]+"."+device.name,
                                        "content_type":"response",
                                        "content": {"response":"device location",
                                                    "token": msg.content["token"],
                                                    "status": (sts and "done" ) or "failed"}})
                            if sts:
                                self.sending({"subject":msg.content["target"]+"."+device.name,
                                            "content_type":"event",
                                            "content": {"event":msg.content["request"],
                                                        "value" : {"parent":pzone.name}}})

                    elif msg.content["request"] == "system state":
                        #print msg
                        pzone=self.getZone(msg.content["value"]["zone"] or self.Zone.name)
                        #print "Building for ",pzone,msg.content["value"]["zone"] or self.Zone.name
                        resu={"name":".","devices":{},"sub_zone":[],"functions":{}}

                        for ftype in self.allFunctions:
                            if ftype not in resu["functions"]:
                                resu["functions"][ftype]={}
                            for fstype in  self.allFunctions[ftype]:
                                resu["functions"][ftype][fstype]=self.allFunctions[ftype][fstype]
                        if self.about:
                            resu["about"]=self.about
                        if self.display:
                            resu["display"]=self.display
                            
                        resu["sub_zone"].append(pzone.toDict())
                        self.sending({"subject":msg.content["target"],
                                    "content_type":"response",
                                    "content": {"response":"system state",
                                                "token": msg.content["token"],
                                                "status": "done",
                                                "value": resu}})

            except:
                print "Bloody problem"
                print msg
                traceback.print_exc(file=sys.stdout)
        else:
            if self.config["debug"]:
                iprint(msg.content_type,msg.subject ,msg.content_type ,msg.content)
            pass
    
    def sending(self,msg):
        #print "Sending",msg
        qmsg = qm.Message(subject=msg["subject"],
                            content_type=msg["content_type"],
                            content=json.dumps(msg["content"])) 
        snd = self.Session.sender(self.config["address"].split("/")[0]+"/"+msg["subject"]) 
        snd.send(qmsg,sync=False) 
        snd.close() 
        #self.Sender.send(qmsg,sync=False)
        
    def hbmsg(self):
        self.sending({"subject":"control.heartbeat","content_type":"event","content": {}})
        
    def dbhb(self):
        xx=self.DBSession.query(bl.Zone).filter_by(name="supercalifragilisticexpialedocious").all()
        
    def getZone(self,name):
        loz=[self.Zone]
        nloz=[]
        while loz:
            for sz in loz:
                if sz.name == name:
                    return sz
                nloz += sz.sub_zone
            loz=nloz
            nloz=[]
        return None
    
    def getDevice(self,name):
        loz=[self.Zone]
        nloz=[]
        while loz:
            for sz in loz:
                for device in sz.devices:
                    if device.name == name:
                        return device
                nloz += sz.sub_zone
            loz=nloz
            nloz=[]
        return None

if __name__ == "__main__":
    myc=Controller()
    myc.configure()
    myc.build()
    myc.connect()
    dbcount=0
    while True:
        try:
            myc.receiving()
        except  KeyboardInterrupt:
            iprint("\n","Exiting at user's request")
            myc.disconnect()
            sys.exit(0)
        except:
            try:
                myc.hbmsg()
            except qm.exceptions.ConnectionError:
                while True:
                    try:
                        print "Reconnect"
                        myc.connect()
                        break
                    except qm.exceptions.ConnectionError,qm.exceptions.NotFound:
                        sleep(5)
            if dbcount >= 10:
                myc.dbhb()
                dbcount=0
            else:
                dbcount+=1
                     
   
